{"version":3,"file":"components-display-ProgressSlider-stories.2be5ba06.iframe.bundle.js","mappings":";;;;;;;AAaA;;;;;;;;;;AAYA;;;;;;AAMA;;;AAKA;;;;;AAOA;;;;;;AAQA;;;AAKA;;;;;;;AAUA;;;;;AAQA;;;;;;;;;;;;;AChEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoHA;AC3HA","sources":["webpack://@zignaly-open/ui/./src/components/display/ProgressSlider/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ProgressSlider/stories.tsx","webpack://@zignaly-open/ui/./src/components/display/Typography/styles.ts","webpack://@zignaly-open/ui/./src/components/display/Typography/types.tsx"],"sourcesContent":["import croma from \"chroma-js\";\nimport styled from \"styled-components\";\nimport Typography from \"../Typography\";\n\nexport const Layout = styled.div`\n  position: relative;\n  padding-top: 10px;\n  margin-bottom: 12px;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Bar = styled.div`\n  background: linear-gradient(90deg, #567734 0%, #948d23 34.43%, #8e3b24 68.81%, #8c1954 99.89%);\n  box-shadow: inset 0px 1px 1px -1px rgba(73, 9, 123, 0.25);\n  border-radius: 100px;\n  height: 4px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  margin: 0 7px;\n`;\n\nexport const DotContainer = styled.div<{ value: number }>`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  position: absolute;\n  left: ${(props) => props.value}%;\n  top: -4px;\n  transform: translate(-50%, 0%);\n`;\n\nexport const Dot = styled.div`\n  background: rgba(255, 255, 255, 0.9);\n  height: 7px;\n  margin-top: 3px;\n  width: 2px;\n`;\n\nexport const Label = styled(Typography)`\n  color: RGB(193, 193, 200);\n\n  &.body1 {\n    font-size: 13px;\n  }\n`;\n\nconst gradient = croma.scale([\"#567734\", \"#948d23\", \"#8e3b24\", \"#8c1954\"]);\n\nexport const LabelTooltip = styled(Label)<{ value: number }>`\n  border-radius: 3px;\n  pointer-events: none;\n  background: ${(props) =>\n    gradient(props.value / 100)\n      .brighten(1)\n      .toString()};\n\n  top: -38px;\n  line-height: 1 !important;\n  padding: 5px 6px;\n  position: relative;\n  display: block;\n  color: ${(props) =>\n    gradient(props.value / 100)\n      .darken(1.5)\n      .toString()};\n\n  &:before {\n    content: \"\";\n    border: 4px solid transparent;\n    border-top-color: ${(props) =>\n      gradient(props.value / 100)\n        .brighten(1)\n        .toString()};\n    position: absolute;\n    top: 100%;\n    left: calc(50% - 4px);\n  }\n\n  small {\n    font-size: 10px;\n    bottom: 2px;\n    position: relative;\n  }\n`;\n","import * as React from \"react\";\nimport { ComponentMeta, ComponentStory } from \"@storybook/react\";\n\nimport ProgressSlider from \".\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  width: 300px;\n`;\n\nexport default {\n  title: \"Display/ProgressSlider\",\n  component: ProgressSlider,\n} as ComponentMeta<typeof ProgressSlider>;\n\nconst Template: ComponentStory<typeof ProgressSlider> = (args) => (\n  <Container>\n    <ProgressSlider {...args} />\n  </Container>\n);\n\nconst defaultProps = {\n  value: 25,\n};\n\nexport const ProgressSliderBar = Template.bind({});\nProgressSliderBar.args = {\n  ...defaultProps,\n  max: 50,\n};\n","import styled from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\n\nconst getWeight = (weight: string) => {\n  if (weight === \"demibold\") {\n    return 600;\n  } else if (weight === \"medium\") {\n    return 500;\n  } else {\n    return 400;\n  }\n};\n\ninterface LayoutProps {\n  color: string;\n  underline: boolean;\n  weight: string;\n  marginRight?: number;\n  marginLeft?: number;\n  marginTop?: number;\n  marginBottom?: number;\n}\n\nexport const Layout = styled.h1<LayoutProps>`\n  font-family: \"Avenir next\", \"Red Hat Text\", sans-serif;\n  margin: 0;\n  padding: 0;\n  font-weight: 500;\n\n  &.h1 {\n    font-size: 22px;\n    line-height: 36px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h2 {\n    font-size: 18px;\n    line-height: 28px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h3 {\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h4 {\n    font-size: 13px;\n    line-height: 20px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h5 {\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.55px;\n  }\n\n  &.bigNumber {\n    font-size: 26px;\n    line-height: 40px;\n    letter-spacing: 0.55px;\n  }\n\n  &.body1 {\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  &.body2 {\n    font-size: 13px;\n    line-height: 20px;\n    letter-spacing: 0.55px;\n  }\n\n  &.buttonxl {\n    font-size: 16px;\n    line-height: 20px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonl {\n    font-size: 13px;\n    line-height: 18px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonm {\n    font-size: 11px;\n    line-height: 14px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonsm {\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 600;\n    letter-spacing: 1.1px;\n  }\n\n  &.inputl {\n    font-size: 16px;\n    line-height: 20px;\n    font-weight: 400;\n    letter-spacing: 0.55px;\n  }\n\n  &.inputm {\n    font-size: 13px;\n    line-height: 18px;\n    font-weight: 400;\n    letter-spacing: 0.55px;\n  }\n\n  &.labelm {\n    font-weight: 400;\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  ${(props) => `\n    color: inherit;\n\n    ${styledIf(\n      props.color,\n      `\n      color: ${props.theme[props.color]};    \n    `,\n    )}\n    ${styledIf(\n      props.underline,\n      `\n      text-decoration-color: ${props.theme[props.color]};\n      text-decoration-line: underline;\n    `,\n    )}\n    ${styledIf(\n      props.weight,\n      `\n      font-weight: ${getWeight(props.weight)};\n    `,\n    )}\n  `}\n`;\n","import React from \"react\";\nimport { dark } from \"theme\";\n\nexport const componentByVariants = {\n  h1: \"span\",\n  h2: \"span\",\n  h3: \"span\",\n  h4: \"span\",\n  h5: \"span\",\n  bigNumber: \"span\",\n  body1: \"span\",\n  body2: \"span\",\n  buttonxl: \"span\",\n  buttonl: \"span\",\n  buttonm: \"span\",\n  buttonsm: \"span\",\n  inputl: \"span\",\n  inputm: \"span\",\n  labelm: \"span\",\n};\n\nexport const weightByType = {\n  medium: \"medium\",\n  demibold: \"demibold\",\n  regular: \"regular\",\n};\n\nexport interface TypographyProps {\n  variant?: keyof typeof componentByVariants;\n  weight?: keyof typeof weightByType;\n  className?: string;\n  component?: any;\n  color?: keyof typeof dark;\n  underline?: boolean;\n  children?: React.ReactNode; // optional to support <Trans />\n  marginRight?: number;\n  marginLeft?: number;\n  marginTop?: number;\n  marginBottom?: number;\n}\n"],"names":[],"sourceRoot":""}