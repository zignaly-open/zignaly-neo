{"version":3,"file":"components-inputs-ZigInputAmount-stories.4b6293b8.iframe.bundle.js","mappings":";AAGA;;AAOA;;;;AAIA;;ACdA;ACqEA;;;;;;;;;;AAUA;;AAEA;AACA;;;;;;;;;;;;;AAaA;AACA;;;;;;;AASA;;ACnBA;;;;AAIA;;;;;;AAMA;;;;AA4BA;AACA;;AAIA;ACrHA;;;;AAKA;;;;AAIA;AAEA;;;;;AAUA;;;;;;;AAWA;AACA;AAEA;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;AAkBA;;;AAKA;;;;AASA;AACA;AAkBA;;;AAGA;;;;;AAKA","sources":["webpack://@zignaly-open/ui/./src/components/display/ZigCoinIcon/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigCoinIcon/types.ts","webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/index.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigInput/index.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigInputAmount/styles.ts"],"sourcesContent":["import { styled } from \"@mui/system\";\n\nexport const Icon = styled(\"img\")<{ size: number }>`\n  ${({ size }) => `\n    width: ${size}px;\n    height: ${size}px;\n  `}\n  border-radius: 50%;\n`;\n\nexport const Placeholder = styled(Icon)<{ size: number }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.palette.backgrounds.coinIconPlaceholder};\n  font-size: 16px;\n`;\n","export const COIN_SIZES = {\n  Small: \"small\",\n  Medium: \"medium\",\n  Large: \"large\",\n} as const;\n\ntype CoinSizesKeys = keyof typeof COIN_SIZES;\nexport type CoinSizes = typeof COIN_SIZES[CoinSizesKeys];\n\nexport const sizes = {\n  [COIN_SIZES.Small]: 24,\n  [COIN_SIZES.Medium]: 36,\n  [COIN_SIZES.Large]: 42,\n};\n\nexport type ZIGCoinIconProps = {\n  size?: CoinSizes | number;\n  coin: string;\n  className?: string;\n  bucket?: string;\n  id?: string;\n};\n","import React from \"react\";\nimport { LoadingButton, LoadingButtonProps } from \"@mui/lab\";\nimport { ButtonGroup, styled, Tooltip } from \"@mui/material\";\n\nexport type ZigButtonProps = Omit<LoadingButtonProps, \"size\" | \"variant\"> & {\n  size?: LoadingButtonProps[\"size\"] | \"xlarge\";\n  variant?: LoadingButtonProps[\"variant\"];\n  ctaId?: string;\n  tooltip?: string;\n  narrow?: boolean;\n  linkTarget?: \"_blank\";\n  linkRel?: \"noopener noreferrer\";\n  active?: boolean;\n};\n\nconst ZigButton = ({\n  active,\n  tooltip,\n  ctaId,\n  color,\n  size,\n  narrow,\n  variant = \"contained\",\n  linkTarget,\n  linkRel,\n  ...props\n}: ZigButtonProps) => {\n  const button = (\n    <LoadingButton\n      data-tack-cta={ctaId}\n      // it wasn't me lol\n      size={size as LoadingButtonProps[\"size\"]}\n      variant={variant as LoadingButtonProps[\"variant\"]}\n      {...props}\n      {...(narrow\n        ? {\n            sx: {\n              ...props.sx,\n              minWidth: \"0 !important\",\n              padding: \"6px\",\n            },\n          }\n        : {})}\n      {...(props.href\n        ? {\n            rel: linkRel ?? \"noopener noreferrer\",\n            target: linkTarget ?? \"_blank\",\n          }\n        : {})}\n      // @ts-ignore\n      data-testid={\n        props[\"data-testid\"] || (process.env.NODE_ENV === \"test\" && props.id) || undefined\n      }\n      // hack to preserve old behavior but allow for normal mui theming\n      color={variant === \"outlined\" && !color ? \"secondary\" : color}\n      className={active ? `${props.className} MuiButton-active` : props.className}\n    />\n  );\n  return tooltip ? (\n    <Tooltip title={tooltip}>\n      {/* if we want to have a tooltip and have the button be disabled, we need a new container */}\n      {props.disabled ? <span>{button}</span> : button}\n    </Tooltip>\n  ) : (\n    button\n  );\n};\n\nexport const ZigButtonGroup = styled(ButtonGroup)`\n  outline: 1px solid ${({ theme }) => theme.palette.neutral600};\n  outline-offset: -1px;\n\n  .MuiButton-root {\n    font-weight: 400;\n    text-transform: capitalize !important;\n\n    &:hover,\n    &.MuiButton-active {\n      z-index: 3;\n      border-color: ${({ theme }) => theme.palette.backgrounds.greyedOutBorder} !important;\n      border-radius: 5px;\n      background: ${({ theme }) => theme.palette.neutral750};\n      color: ${({ theme }) => theme.palette.highlighted};\n\n      + button,\n      + span button {\n        border-left-color: transparent;\n      }\n    }\n\n    &:not(:last-child) {\n      border-right-color: transparent;\n    }\n\n    &.Mui-disabled {\n      border-color: ${({ theme }) => theme.palette.neutral600};\n      color: ${({ theme }) => theme.palette.contrasting}33;\n    }\n  }\n\n  span button {\n    height: 100%;\n  }\n` as typeof ButtonGroup;\n\nexport default ZigButton as typeof LoadingButton & typeof ZigButton;\n","import React, { useState } from \"react\";\nimport { ZigInputProps } from \"./types\";\nimport { styled } from \"@mui/material/styles\";\nimport { InputAdornment, TextField } from \"@mui/material\";\nimport ZigButton from \"../ZigButton\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport { ErrorMessage } from \"../../display/ZigAlertMessage\";\n\nfunction valueToArray<T>(v: T | T[]): T[] {\n  return (Array.isArray(v) ? v : [v]).filter(Boolean);\n}\n\nconst ZigInput: React.FC<ZigInputProps> = styled<React.FC<ZigInputProps>>(\n  React.forwardRef(({ error, wide, sensitive, labelAction, helperText, id, ...props }, ref) => {\n    const [isShown, setIsShown] = useState(false);\n    const EyeIcon = !isShown ? VisibilityOffIcon : VisibilityIcon;\n\n    return (\n      <TextField\n        id={id}\n        inputRef={ref}\n        {...props}\n        inputProps={{\n          ...(props.inputProps || {}),\n          \"data-testid\":\n            props?.inputProps?.[\"data-testid\"] ||\n            (process.env.NODE_ENV === \"test\" && id) ||\n            undefined,\n        }}\n        label={\n          !props.label ? null : (\n            <>\n              {props.label}\n              {labelAction && (\n                <ZigButton\n                  variant={\"text\"}\n                  sx={{ fontSize: \"13px\", fontWeight: 400 }}\n                  tabIndex={labelAction.tabIndex}\n                  onClick={labelAction.onClick}\n                  href={labelAction.href}\n                  id={labelAction.id}\n                >\n                  {labelAction.text}\n                </ZigButton>\n              )}\n            </>\n          )\n        }\n        variant={\"standard\"}\n        error={!!error}\n        helperText={\n          typeof error === \"string\" && error !== \"\"\n            ? error && <ErrorMessage text={error} id={id && `${id}-error-message`} />\n            : helperText\n        }\n        type={sensitive ? (!isShown ? \"password\" : \"text\") : props.type}\n        InputProps={{\n          disableUnderline: true,\n          ...(props.InputProps || {}),\n          ...(sensitive\n            ? {\n                endAdornment: [\n                  <InputAdornment position=\"end\" key={id + \"-sensivive\"}>\n                    {!!sensitive && (\n                      <EyeIcon\n                        id={id && `${id}-visibility-icon`}\n                        onClick={() => setIsShown((v) => !v)}\n                        width={40}\n                        height={40}\n                        sx={ZigInputInteractiveAdornmentStyle}\n                      />\n                    )}\n                  </InputAdornment>,\n                  ...valueToArray(props?.InputProps?.endAdornment),\n                ],\n              }\n            : {}),\n        }}\n        InputLabelProps={{ shrink: true, ...(props.InputLabelProps || {}) }}\n      />\n    );\n  }),\n  { shouldForwardProp: (p) => p !== \"labelInline\" },\n)`\n  // TODO: move to darkMui\n  ${(props) => props.wide && \"display: block;\"}\n\n  .MuiInputLabel-root {\n    &.Mui-focused {\n      color: ${({ theme }) => theme.palette.neutral000};\n    }\n    transform: none !important;\n    width: 100%;\n    transition: color 0.2s;\n\n    ${({ theme, labelInline }) =>\n      !labelInline\n        ? `\n    font-size: 15px !important;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n    color: ${theme.palette.neutral200} !important;\n    \n    display: flex;\n    position: static;\n    flex-direction: row;\n    justify-content: space-between;\n\n    button {\n      float: right;\n    }\n  `\n        : `\n    text-align: center;\n    z-index: 2;\n    font-size: 11px;\n    letter-spacing: 0.33px;\n    margin-top: 8px;\n    color: ${theme.palette.neutral300} !important;\n  `}\n  }\n\n  .MuiInput-root {\n    padding: ${({ labelInline }) => (labelInline ? \"18px 24px 6px\" : \"12px 24px\")};\n    margin-top: ${(props) => (props.label ? \"10px\" : 0)};\n  }\n`;\n\nexport const ZigInputInteractiveAdornmentStyle = {\n  cursor: \"pointer\",\n  color: \"neutral300\",\n  transition: \"all .3s\",\n  \"&:hover\": {\n    color: \"neutral200\",\n  },\n};\n\nexport default ZigInput;\n","import { Divider } from \"@mui/material\";\nimport { styled, Box } from \"@mui/system\";\nimport ZigButton from \"../ZigButton\";\n\nexport const Layout = styled(Box, {\n  shouldForwardProp: (p) =>\n    ![\"labelInline\", \"withCoinSelector\", \"error\"].includes(p as unknown as string),\n})<{\n  withCoinSelector?: boolean;\n  error: boolean;\n  labelInline: boolean;\n}>`\n  border: ${({ withCoinSelector, theme }) =>\n    withCoinSelector ? \"none;\" : `1px dotted ${theme.palette.neutral600}`};\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: ${({ withCoinSelector }) => (withCoinSelector ? \"5px 24px 0\" : \"24px 24px 12px\")};\n  position: relative;\n  border-radius: 5px;\n\n  ${({ error, theme, withCoinSelector }) =>\n    error && !withCoinSelector && `border-color: ${theme.palette.redGraphOrError};`}\n  ${({ labelInline }) =>\n    labelInline &&\n    `\n      border-top: none;\n      margin-top: 5px;\n    `}\n\n  && {\n    .MuiInput-root {\n      padding: 2px 24px;\n      ${({ withCoinSelector, theme }) =>\n        !withCoinSelector &&\n        `\n        background: ${theme.palette.neutral750};\n      `}\n      border: none;\n    }\n\n    .MuiInput-input {\n      font-size: 30px;\n      font-weight: 500;\n      border-color: ${({ theme }) => theme.palette.neutral400};\n      background: ${({ theme, withCoinSelector }) =>\n        withCoinSelector ? \"unset\" : theme.palette.neutral750};\n      -webkit-text-fill-color: ${({ theme }) => theme.palette.neutral175} !important;\n    }\n  }\n`;\n\nexport const DividerWrapper = styled(Box)<{ error?: boolean }>`\n  padding: 8px 0;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const TopDivider = styled(Divider, {\n  shouldForwardProp: (prop) => prop !== \"error\",\n})<{ error: boolean }>`\n  position: absolute;\n  text-align: center;\n  left: 0;\n  right: 0;\n  top: 0;\n  transform: translateY(-50%);\n  &:before {\n    left: 1.5px;\n  }\n  &:after {\n    right: 1.5px;\n  }\n\n  &:before,\n  &:after {\n    border-color: ${({ theme, error }) =>\n      error ? theme.palette.redGraphOrError : theme.palette.neutral600};\n    border-top-style: dotted;\n  }\n`;\nexport const InputWrapper = styled(Box)<{\n  withCoinSelector?: boolean;\n  error: boolean;\n  wide?: boolean;\n  disabled?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  width: ${({ wide }) => (wide ? \"1\" : \"auto\")};\n  ${({ withCoinSelector, theme, error, disabled }) =>\n    withCoinSelector &&\n    `\n    gap: 0;\n    border-radius: 5px;\n    border: 1px dotted ${error ? theme.palette.redGraphOrError : theme.palette.neutral600};\n    &:hover{\n      border-color: ${\n        error\n          ? theme.palette.redGraphOrError\n          : disabled\n          ? theme.palette.neutral600\n          : theme.palette.neutral400\n      };\n    }\n    `};\n`;\n\nexport const MaxButton = styled(ZigButton)`\n  padding: 3px 10px;\n  border-radius: 13px;\n  border: solid 1px ${(props) => props.theme.palette.neutral600};\n  min-width: 44px;\n  min-height: 30px;\n  font-size: 12px;\n  background: transparent;\n  color: ${({ theme }) => theme.palette.neutral200};\n`;\n"],"names":[],"sourceRoot":""}