{"version":3,"file":"components-display-ZigDropdown-stories.2c7462a6.iframe.bundle.js","mappings":";AAQA;;AAOA;;;AAKA;;;;;;;;AAUA;;;AAGA;AACA;AAGA;AASA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAIA;;;;AAIA;;AAmBA;;;;AAMA;AACA;AAGA;AAKA;AACA;AAGA;;;;;;;;;AAWA;;;;;;;;;AAWA;AACA;AAGA;;;;;;AAMA;AAGA;;;AAKA;;AAEA;;ACrFA;;;;;;;;;;AAUA;;AAEA;AACA;;;;;;;;;;;;;AAaA;AACA;;;;;;;AASA","sources":["webpack://@zignaly-open/ui/./src/components/display/ZigDropdown/styles.ts","webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/index.tsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\nimport { ReactComponent as ArrowBottomIcon } from \"assets/icons/caret-down.svg\";\nimport { Theme } from \"@mui/system\";\n\nconst withSeparator = (props: WithSeparator & { theme: Theme }) =>\n  props.separator &&\n  css`\n    border-top: 1px dotted ${props.theme.palette.neutral600};\n    margin: 6px 35px 6px;\n  `;\n\ntype WithSeparator = { separator?: boolean };\ntype WithCustomStyle = { customStyle?: string };\n\nexport const ZigDropdownContainer = styled.div`\n  user-select: none;\n  min-width: 245px;\n`;\n\nexport const Component = styled.div`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n`;\n\nexport const ComponentWrapper = styled.div<WithSeparator & WithCustomStyle>`\n  padding: 6px 32px;\n\n  ${(props) => props.customStyle || \"\"};\n  ${withSeparator}\n`;\n\nexport const NavLink = styled.span<\n  {\n    notClickable?: boolean;\n    active?: boolean;\n    disabled?: boolean;\n    customStyle?: string;\n  } & WithSeparator &\n    WithCustomStyle\n>`\n  color: ${({ theme }) => theme.palette.neutral200};\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 28px;\n  padding: 6px 32px;\n  letter-spacing: 0.55px;\n  text-decoration: none;\n  transition: 0.15s linear;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 12px;\n  overflow: hidden;\n  max-width: 245px;\n\n  svg {\n    transition: 0.15s linear;\n  }\n\n  ${({ notClickable, theme }) =>\n    !notClickable &&\n    css`\n      &:hover {\n        background: ${theme.backgrounds.headerMenuItemHover};\n      }\n    `}\n\n  ${({ active, theme }) => `\n    ${styledIf(\n      active,\n      `\n      color: ${theme.palette.highlighted};\n    `,\n      `\n\n      &:not([disabled]) {\n        cursor: pointer;\n\n        &:hover {\n          color: ${theme.palette.neutral000};\n        }\n      }\n    `,\n    )}\n  `}\n\n  ${(props) =>\n    props.notClickable &&\n    css`\n      cursor: default !important;\n    `}\n\n  ${(props) => props.customStyle || \"\"};\n  ${withSeparator};\n`;\n\nexport const ComponentSeparator = styled.div<\n  WithSeparator & {\n    customStyle?: string;\n  }\n>`\n  ${withSeparator};\n  ${(props) => props.customStyle || \"\"};\n`;\n\nexport const NavList = styled.div`\n  display: flex;\n  flex-direction: column;\n  > *:first-child {\n    margin-top: 6px;\n  }\n  > *:last-child {\n    margin-bottom: 6px;\n  }\n`;\n\nexport const SubNavList = styled.div`\n  display: flex;\n  flex-direction: column;\n  > *:first-child {\n    margin-top: 6px;\n  }\n  > *:last-child {\n    margin-bottom: 6px;\n  }\n`;\n\nexport const ChildContainer = styled.div<{ active: boolean } & WithSeparator>`\n  ${({ active, theme }) =>\n    active &&\n    css`\n      background: ${theme.backgrounds.dropdown2ndLevel};\n      /* When the menu is expanded, replace bottom margin with padding to fit the background until the bottom */\n      margin-bottom: 0 !important;\n      padding-bottom: 12px;\n    `}\n\n  ${withSeparator}\n`;\n\nexport const SpaceTaker = styled.span`\n  display: flex;\n  flex: 1;\n`;\n\nexport const ArrowBottomIconStyled = styled(ArrowBottomIcon)<{ rotated?: boolean }>`\n  transition: 0.15s linear;\n  transform: rotate(${(props) => (props.rotated ? \"180deg\" : \"0deg\")});\n`;\n","import React from \"react\";\nimport { LoadingButton, LoadingButtonProps } from \"@mui/lab\";\nimport { ButtonGroup, styled, Tooltip } from \"@mui/material\";\n\nexport type ZigButtonProps = Omit<LoadingButtonProps, \"size\" | \"variant\"> & {\n  size?: LoadingButtonProps[\"size\"] | \"xlarge\";\n  variant?: LoadingButtonProps[\"variant\"];\n  ctaId?: string;\n  tooltip?: string;\n  narrow?: boolean;\n  linkTarget?: \"_blank\";\n  linkRel?: \"noopener noreferrer\";\n  active?: boolean;\n};\n\nconst ZigButton = ({\n  active,\n  tooltip,\n  ctaId,\n  color,\n  size,\n  narrow,\n  variant = \"contained\",\n  linkTarget,\n  linkRel,\n  ...props\n}: ZigButtonProps) => {\n  const button = (\n    <LoadingButton\n      data-tack-cta={ctaId}\n      // it wasn't me lol\n      size={size as LoadingButtonProps[\"size\"]}\n      variant={variant as LoadingButtonProps[\"variant\"]}\n      {...props}\n      {...(narrow\n        ? {\n            sx: {\n              ...props.sx,\n              minWidth: \"0 !important\",\n              padding: \"6px\",\n            },\n          }\n        : {})}\n      {...(props.href\n        ? {\n            rel: linkRel ?? \"noopener noreferrer\",\n            target: linkTarget ?? \"_blank\",\n          }\n        : {})}\n      // @ts-ignore\n      data-testid={\n        props[\"data-testid\"] || (process.env.NODE_ENV === \"test\" && props.id) || undefined\n      }\n      // hack to preserve old behavior but allow for normal mui theming\n      color={variant === \"outlined\" && !color ? \"secondary\" : color}\n      className={active ? `${props.className} MuiButton-active` : props.className}\n    />\n  );\n  return tooltip ? (\n    <Tooltip title={tooltip}>\n      {/* if we want to have a tooltip and have the button be disabled, we need a new container */}\n      {props.disabled ? <span>{button}</span> : button}\n    </Tooltip>\n  ) : (\n    button\n  );\n};\n\nexport const ZigButtonGroup = styled(ButtonGroup)`\n  outline: 1px solid ${({ theme }) => theme.palette.neutral600};\n  outline-offset: -1px;\n\n  .MuiButton-root {\n    font-weight: 400;\n    text-transform: capitalize !important;\n\n    &:hover,\n    &.MuiButton-active {\n      z-index: 3;\n      border-color: ${({ theme }) => theme.palette.backgrounds.greyedOutBorder} !important;\n      border-radius: 5px;\n      background: ${({ theme }) => theme.palette.neutral750};\n      color: ${({ theme }) => theme.palette.highlighted};\n\n      + button,\n      + span button {\n        border-left-color: transparent;\n      }\n    }\n\n    &:not(:last-child) {\n      border-right-color: transparent;\n    }\n\n    &.Mui-disabled {\n      border-color: ${({ theme }) => theme.palette.neutral600};\n      color: ${({ theme }) => theme.palette.contrasting}33;\n    }\n  }\n\n  span button {\n    height: 100%;\n  }\n` as typeof ButtonGroup;\n\nexport default ZigButton as typeof LoadingButton & typeof ZigButton;\n"],"names":[],"sourceRoot":""}