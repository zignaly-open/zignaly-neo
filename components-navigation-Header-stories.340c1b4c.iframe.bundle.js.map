{"version":3,"file":"components-navigation-Header-stories.340c1b4c.iframe.bundle.js","mappings":";;;;;;;;AAoCA;;;AAKA;;;;;;;;;;AA0BA;;;AAKA;;;;;;;;;;;;;;;;;AAEA;AAuFA;AA0DA;AA0DA;AAiEA;;;;;;;;;;;;;;ACpVA;;;;;ACwBA;;;;;AAOA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAHA;;;;;AAqBA;;AAAA;;;;;;AAMA","sources":["webpack://@zignaly-open/ui/./src/components/inputs/IconButton/styles.ts","webpack://@zignaly-open/ui/./src/components/navigation/Header/utils.ts","webpack://@zignaly-open/ui/./src/components/navigation/Header/styles.ts","webpack://@zignaly-open/ui/./src/components/styled.ts"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\nimport { buttonSizes, buttonVariants } from \"./types\";\nimport Loader from \"components/display/Loader\";\nimport Theme from \"../../../theme/theme\";\n\n// TODO: an icon button component should not take 500 LOC\n// TODO: Simplify this\n\nconst isPrimaryButton = (variant: keyof typeof buttonVariants) =>\n  variant === buttonVariants.primary;\n\nconst isSecondaryButton = (variant: keyof typeof buttonVariants) =>\n  variant === buttonVariants.secondary;\n\nconst isFlatButton = (variant: keyof typeof buttonVariants) => variant === buttonVariants.flat;\n\nconst isSmallButton = (size: keyof typeof buttonSizes) => size === buttonSizes.small;\n\nconst isMediumButton = (size: keyof typeof buttonSizes) => size === buttonSizes.medium;\n\nconst isLargeButton = (size: keyof typeof buttonSizes) => size === buttonSizes.large;\n\nconst isXLargeButton = (size: keyof typeof buttonSizes) => size === buttonSizes.xlarge;\n\nexport const Icon = styled.div`\n  z-index: 2;\n  position: relative;\n  transition: color 0.2s linear;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ButtonLoader = styled(Loader)`\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Container = styled.div`\n  position: relative;\n  border-radius: 4px;\n  transition: all 0.2s linear;\n  outline: none;\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface LayoutProps {\n  size: keyof typeof buttonSizes;\n  variant: keyof typeof buttonVariants;\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"];\n  colors: {\n    normal: string;\n    active: string;\n  };\n  isFocused: boolean;\n  disabled: boolean;\n  shrinkWrap?: boolean;\n  theme: Theme;\n}\n\nexport const Layout = styled.div`\n  position: relative;\n  display: inline-flex;\n`;\n\nexport const IconContainer = styled.div``;\n\nconst renderSizeProps = (props: { size: keyof typeof buttonSizes }) => `\n  ${styledIf(\n    isSmallButton(props.size),\n    `  \n       ${Icon} {\n          svg {\n            width: 14px;\n          }\n        }\n  \n        ${ButtonLoader}{\n          height: 15px;\n          width: 15px;\n        }\n  \n        ${Container} {\n          width: 34px;\n          height: 30px;\n        }\n     `,\n  )}\n     \n  ${styledIf(\n    isMediumButton(props.size),\n    `\n      ${Icon} {\n        svg {\n          width: 18px;\n        }\n      }\n\n      ${ButtonLoader}{\n        height: 20px;\n        width: 20px;\n      }\n\n      ${Container} {\n        width: 42px;\n        height: 36px;\n      }\n    `,\n  )}\n\n  ${styledIf(\n    isLargeButton(props.size),\n    `\n      ${Icon} {\n        svg {\n          width: 18px;\n        }\n      }\n\n      ${ButtonLoader}{\n        height: 25px;\n        width: 25px;\n      }\n\n      ${Container} {\n        width: 56px;\n        height: 48px;\n      }\n    `,\n  )}\n\n  ${styledIf(\n    isXLargeButton(props.size),\n    `\n      ${Icon} {\n        svg {\n          width: 24px;\n          height: 24px;\n        }\n      }\n\n      ${ButtonLoader}{\n        height: 30px;\n        width: 30px;\n      }\n\n      ${Container} {\n        width: 68px;\n        height: 60px;\n      }\n    `,\n  )}\n`;\n\nconst renderPrimaryProps = (props: LayoutProps) => `\n  ${styledIf(\n    isPrimaryButton(props.variant),\n    `\n      ${Container} {\n        background: linear-gradient(289.8deg, #149CAD 0%, #4540C1 100%);\n      }\n\n      &:enabled:focus:not(:focus-visible) {\n        outline: 0;\n        box-shadow: none;\n      }\n\n      &:enabled:focus:focus-visible {\n        background: linear-gradient(121.21deg, #A600FB 10.7%, #6F06FC 31.3%, #4959F5 60.13%, #2E8DDF 76.19%, #12C1C9 89.78%);\n\n        ${Container} {\n          border: 1px solid white;\n          background: linear-gradient(289.8deg, #149CAD 0%, #4540C1 100%);\n        }\n      }\n\n      &[disabled] {\n        ${IconContainer}{\n          opacity: 0.33;\n        }\n      }\n\n      &:enabled {\n        ${Container} {\n          &:before {\n            border-radius: inherit;\n            background: linear-gradient(312.12deg, #8671F7 14.16%, #7EC9F9 83.59%);\n            content: '';\n            display: block;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            opacity: 0;\n            width: 100%;\n            z-index: 1;\n            transition: all 100ms linear;\n          }\n        }\n      }\n\n      &:enabled:active {\n        ${Container} {\n          &:before {\n            opacity: 1;\n          }\n        }\n      }\n    `,\n  )}\n`;\n\nconst renderSecondaryProps = (props: LayoutProps) => `\n  ${styledIf(\n    isSecondaryButton(props.variant),\n    `\n      ${Container} {\n        background: rgba(16, 18, 37, 0.3);\n        transition: all 0.2s linear;\n        border: 1px ${props.theme.neutral600} solid;\n\n      ${styledIf(\n        props.disabled,\n        `\n          opacity: 0.33;\n        `,\n        `\n          &:hover {\n            background: linear-gradient(289.8deg, rgba(20, 156, 173, 0.16) 0%, rgba(69, 64, 193, 0.16) 100%);\n            border-color: ${props.theme.neutral500};\n          }\n        `,\n      )}\n\n      ${Icon} {\n        color: ${props.theme.neutral200};\n      }\n\n      &:enabled:focus:not(:focus-visible) {\n        outline: 0;\n        box-shadow: none;\n      }\n\n      &:enabled:focus:focus-visible {\n          ${Container} {\n            background: linear-gradient(289.8deg, rgba(20, 156, 173, 0.16) 0%, rgba(69, 64, 193, 0.16) 100%);\n            -webkit-transition:none;\n            -moz-transition:none;\n            -o-transition:none;\n            transition:none;\n            box-shadow: inset 0px 0px 0px 2px #FFFFFF;\n            border-radius: 5px;\n            border-color: ${props.theme.highlighted};\n          }\n        }\n      }\n\n      &:enabled:active {\n        ${Container} {\n          background: linear-gradient(289.8deg, rgba(20, 156, 173, 0.16) 0%, rgba(69, 64, 193, 0.16) 100%);\n          -webkit-transition:none;\n          -moz-transition:none;\n          -o-transition:none;\n          transition:none;\n          border-color: ${props.theme.highlighted};\n      }\n    `,\n  )}\n`;\n\nconst renderFlatProps = (props: LayoutProps) => `\n  ${styledIf(\n    isFlatButton(props.variant),\n    `\n      ${styledIf(\n        props.shrinkWrap,\n        `\n          padding: 0;\n          ${Container}{\n            padding: 0;\n            margin: 0;\n            width: 100%;\n            height: 100%;\n          }\n          ${IconContainer} {\n            padding: 0;\n            margin: 0;\n            width: 100%;\n            height: 100%;\n          }\n        `,\n      )}\n      \n      ${Container} {\n        transition: all 0.2s linear;\n        border: none;\n        background: transparent;\n      }\n\n      &:enabled:focus:not(:focus-visible) {\n        outline: 0;\n        box-shadow: none;\n      }\n\n      &:enabled:focus:focus-visible {\n        ${Container} {\n          border: 1px solid ${props.theme.neutral000};\n          background: #040618;\n\n          &:before {\n            background: linear-gradient(289.8deg, rgba(20, 156, 173, 0.16) 0%, rgba(69, 64, 193, 0.16) 100%);\n            opacity: 1;\n          }\n        }\n\n        ${Icon} {\n          color: ${props.theme.neutral000};\n        }\n      }\n\n      &[disabled] {\n        ${IconContainer}{\n          opacity: 0.33;\n        }\n      }\n\n      &:enabled {\n        ${Container} {\n          background: none;\n        }\n      }\n    `,\n  )}\n`;\n\nconst renderFocusedProps = (props: LayoutProps) => `\n    ${styledIf(\n      props.isFocused,\n      ` \n      background: #12152C;      \n      padding: 2px;\n      border-radius: 4px 4px 0 0;\n             \n      &:enabled:active {\n        padding: 2px;\n        background: #12152c;\n      }\n             \n      ${Container} {\n        background: #12152C;\n        border: 1px solid #12152C !important;\n              \n        &:before {\n          opacity: 0 !important;\n        }\n      }\n    `,\n    )}\n`;\n\nexport const ViewPort = styled.button<LayoutProps>`\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  padding: 2px;\n  outline: none;\n\n  position: relative;\n  user-select: none;\n  background: transparent;\n\n  transition: all 0.1s linear;\n\n  &[disabled] {\n    cursor: default;\n  }\n\n  ${renderSizeProps}\n  ${renderPrimaryProps}\n  ${renderSecondaryProps}\n  ${renderFlatProps}\n  ${renderFocusedProps}\n`;\n","// TODO: Move this for config or theme folder.\nexport const headerConfig = {\n  height: \"52px\",\n};\n","import styled from \"styled-components\";\n\n// Config\nimport { headerConfig } from \"./utils\";\nimport { MarginContainer } from \"../../styled\";\n\nexport const Layout = styled.header`\n  background: linear-gradient(269.14deg, #080810 0%, #11122b 100%);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 16px;\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  z-index: 12;\n  height: ${headerConfig.height};\n\n  @media only screen and (min-width: 600px) {\n    padding: 0 32px;\n  }\n`;\n\nexport const Container = styled(MarginContainer)`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nexport const Side = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 28px;\n`;\n\nexport const HeaderLinksContainer = styled.nav`\n  display: flex;\n  flex-direction: row;\n  gap: 28px;\n  user-select: none;\n\n  a {\n    color: #706f82;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 28px;\n    letter-spacing: 0.55px;\n    text-decoration: none;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #fff;\n    }\n\n    &.active {\n      &,\n      &:hover {\n        color: #7682f7;\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport ZigTypography from \"./display/ZigTypography\";\n\nexport const ButtonGroup = styled.div`\n  display: grid;\n\n  ${(props: any) => `\n    grid-template-columns: repeat(${props.children.length}, minmax(0%, 100%));\n    gap: 8px;\n  `}\n`;\n\nexport const MarginContainer = styled.div`\n  margin: 0 auto;\n  max-width: 1430px;\n  padding: 0 22px;\n  width: 100%;\n`;\n\nexport const PageContainer = styled(MarginContainer)`\n  padding: 52px 22px 0;\n`;\n\n// TODO: replace with proper styled comp usages instead of classes\nexport const ValueIndicator = styled(ZigTypography)<any>`\n  display: inline;\n  font-size: 15px !important;\n  line-height: 24px !important;\n  font-weight: 500;\n\n  ${(props: any) => `\n    \n    &.zero {\n      color: ${props.theme.neutral300}\n    }\n    \n    &.positive {\n      color: ${props.theme.greenGraph};\n    }\n    \n    &.negative {\n      color: ${props.theme.redGraphOrError};\n    }\n  `}\n`;\n"],"names":[],"sourceRoot":""}