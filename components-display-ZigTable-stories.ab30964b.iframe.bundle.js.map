{"version":3,"file":"components-display-ZigTable-stories.ab30964b.iframe.bundle.js","mappings":";;;;AAQA;;;;;ACLA;;AAOA;;;;;;;;ACEA;;AAIA;;;;;;;;AAUA;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAQA;;AAmBA;;;AAKA;AAGA;;;AAKA;AACA;;;;AAMA;AAGA;;;AAKA;;;;;;ACjGA;;AAqBA;;;;;;AATA;;AAEA;AAOA;;;;;AAOA;;;;;AAOA;;AAIA;;;;AAIA;;;;;;;;;;;;;ACxCA;;;;;AAOA;;;AAKA;;AAIA;;;;;;;;;ACrBA;;;;;;;;;;;;;AAaA;;;;;;AAMA;;;;AAIA;;;;;;;;;;;;;;;AAiBA;;;AAKA;;AAUA;;;;;AAIA;;;;;;;AAOA;AACA;AAGA;;;;;;;;;AAWA;;AAIA;;;;;AAOA;;;;;;;;;ACtFA;;;;;;;;;;;;;AAeA;;;AAUA;;;;;;AAMA;;;;;;;;;;;;AC8BA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;;AAEA;;;;;;AAMA;AAEA;AACA;;;;;AAYA;;;;;AAKA;AAEA;;;AAKA;;AAIA;;;;;;;AAOA;;;;;;;;;;;;AAaA;;;;;;;;;AAWA;AACA;AACA;;AAIA;;;;;AAMA;;AAIA;AAEA;;;;AAIA;AACA;;;;;AAKA;;;;;;;;AAQA;;;AAMA;;;;;;;AAWA;;;;AAMA;;;;;;;;;ACjIA;;AAAA;;;;;;AAMA","sources":["webpack://@zignaly-open/ui/./src/components/display/ZigAlertMessage/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigCoinIcon/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigDropdown/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigTable/components/ChangeIndicator/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigTable/components/CoinLabel/styles.ts","webpack://@zignaly-open/ui/./src/components/display/ZigTable/styles.tsx","webpack://@zignaly-open/ui/./src/components/inputs/CheckBox/styles.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/index.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigSelect/styles.tsx","webpack://@zignaly-open/ui/./src/components/styled.ts"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Layout = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const Icon = styled.div`\n  margin-right: 8px;\n  display: flex;\n  align-items: center;\n`;\n","import { styled } from \"@mui/system\";\n\nexport const Icon = styled(\"img\")<{ size: number }>`\n  ${({ size }) => `\n    width: ${size}px;\n    height: ${size}px;\n  `}\n  border-radius: 50%;\n`;\n\nexport const Placeholder = styled(Icon)<{ size: number }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #324054;\n  font-size: 16px;\n`;\n","import styled, { css } from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\nimport { ReactComponent as ArrowBottomIcon } from \"assets/icons/arrow-bottom-icon.svg\";\n\nconst withSeparator = (props: WithSeparator) =>\n  props.separator &&\n  css`\n    border-top: 1px solid rgb(44, 45, 89);\n  `;\n\ntype WithSeparator = { separator?: boolean };\n\nexport const ZigDropdownContainer = styled.div`\n  user-select: none;\n`;\n\nexport const Component = styled.div`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n`;\n\nexport const ComponentWrapper = styled.div<WithSeparator>`\n  padding: 5px 18px;\n  ${withSeparator}\n`;\n\nexport const NavLink = styled.span<\n  { notClickable?: boolean; active?: boolean; disabled?: boolean } & WithSeparator\n>`\n  color: #706f82;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 28px;\n  padding: 12px 18px;\n  letter-spacing: 0.55px;\n  text-decoration: none;\n  transition: 0.15s linear;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 12px;\n  overflow: hidden;\n\n  svg {\n    transition: 0.15s linear;\n  }\n\n  ${({ notClickable }) =>\n    !notClickable &&\n    css`\n      &:hover {\n        background: rgb(28, 29, 53);\n      }\n    `}\n\n  ${({ active }) => `\n    ${styledIf(\n      active,\n      `\n      color: #7682f7;\n    `,\n      `\n\n      &:not([disabled]) {\n        cursor: pointer;\n\n        &:hover {\n          color: #fff;\n        }\n      }\n    `,\n    )}\n  `}\n\n  ${(props) =>\n    props.notClickable &&\n    css`\n      cursor: default !important;\n    `}\n  ${withSeparator};\n`;\n\nexport const NavList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ChildContainer = styled.div<{ active: boolean } & WithSeparator>`\n  ${(props) =>\n    props.active &&\n    css`\n      background: rgb(25, 26, 48);\n    `}\n\n  ${withSeparator}\n`;\n\nexport const SpaceTaker = styled.span`\n  display: flex;\n  flex: 1;\n`;\n\nexport const ArrowBottomIconStyled = styled(ArrowBottomIcon)`\n  transition: 0.15s linear;\n`;\n","import styled from \"styled-components\";\nimport { ReactComponent as CaretTriangleIcon } from \"assets/icons/caret-triangle-icon.svg\";\nimport muiStyled from \"@emotion/styled\";\nimport ZigTypography from \"../../../ZigTypography\";\n\nexport const Layout = styled.div`\n  display: grid;\n  grid-row: auto;\n  justify-content: center;\n`;\n\nexport const Container = styled.div`\n  text-align: center;\n`;\n\nexport const TropyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-left: 5px;\n`;\n\nexport const Value = muiStyled(ZigTypography)<{ isPositive: boolean }>`\n  display: inline;\n  ${(props) => `\n    font-size: 12px;\n    font-weight: 500;\n    color: ${props.isPositive ? props.theme.greenGraph : props.theme.redGraphOrError};\n  `}\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Inline = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Subtitle = muiStyled(ZigTypography)`\n  display: block;\n`;\n\nexport const Indicator = styled(CaretTriangleIcon)<{ isPositive: boolean }>`\n  margin-right: 6px;\n  vertical-align: middle;\n\n  ${({ isPositive }) => `\n    transform: ${isPositive ? \"rotateX(0deg)\" : \"rotateX(180deg)\"};\n  `}\n\n  &.graph {\n    margin-left: 6px;\n    width: 8px;\n    height: 8px;\n  }\n`;\n","import styled from \"styled-components\";\n\nimport muiStyled from \"@emotion/styled\";\nimport ZigTypography from \"../../../ZigTypography\";\nimport ZigCoinIcon from \"../../../ZigCoinIcon\";\n\nexport const Layout = styled.div`\n  flex-direction: row;\n  display: flex;\n  flex: 1;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nexport const WrapCoin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nexport const Icon = styled(ZigCoinIcon)`\n  display: flex;\n  margin-right: 12px;\n`;\n\nexport const Name = muiStyled(ZigTypography)`\n  display: flex;\n`;\n\nexport const Coin = styled.span`\n  display: flex;\n  text-transform: uppercase;\n`;\n","import { ExpandMore } from \"@mui/icons-material\";\nimport { css, styled } from \"@mui/system\";\nimport { SortDirection } from \"@tanstack/react-table\";\nimport { IconButton } from \"@mui/material\";\n\nexport const TableContainer = styled(\"div\")`\n  overflow: auto;\n`;\n\nexport const Table = styled(\"table\")`\n  border-spacing: 0;\n  width: 100%;\n  border-radius: 16px;\n\n  thead {\n    height: 56px;\n    user-select: none;\n    background: #08081d;\n    box-shadow: 0 0 10px #16192b;\n  }\n\n  th {\n    color: ${({ theme }) => theme.palette.neutral200};\n    white-space: nowrap;\n    padding: 4px 10px;\n  }\n\n  td {\n    color: ${({ theme }) => theme.palette.neutral100};\n    padding: 12px 22px;\n    white-space: nowrap;\n    height: 95px;\n    border-bottom: 1px solid ${({ theme }) => theme.palette.neutral700};\n    text-align: center;\n  }\n\n  tbody {\n    tr {\n      background: #13122566;\n\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n  }\n`;\n\nexport const SortIcon = styled(ExpandMore, {\n  shouldForwardProp: (prop) => prop !== \"isSorted\",\n})<{ isSorted: false | SortDirection }>`\n  transition: all 0.1s linear;\n\n  ${({ isSorted }) =>\n    !isSorted\n      ? css`\n          visibility: none;\n          opacity: 0;\n          margin-left: -24px;\n        `\n      : isSorted === \"asc\"\n      ? css`\n          transform: rotate(180deg);\n        `\n      : ``}\n`;\n\nexport const PageNumberContainer = styled(\"div\")`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 41px;\n  height: 36px;\n  border-radius: 5px;\n  background: ${({ theme }) => theme.palette.neutral750};\n  box-shadow: inset 0px 0px 0px 1px ${({ theme }) => theme.palette.neutral600};\n`;\n\nexport const SmallSelectWrapper = styled(\"div\")`\n  min-width: 84px;\n\n  .zig-react-select {\n    &__control {\n      min-height: 36px !important;\n      padding: 0 !important;\n    }\n  }\n`;\n\nexport const HeaderIconButton = styled(IconButton)`\n  margin-left: -20px;\n`;\n\nexport const SortBox = styled(\"div\", {\n  shouldForwardProp: (prop) => prop !== \"canSort\",\n})<{ canSort: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  ${({ canSort }) =>\n    canSort &&\n    css`\n      cursor: pointer;\n    `}\n`;\n","import styled from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\n\nimport { ReactComponent as CheckmarkIcon } from \"assets/icons/checkmark-active-icon.svg\";\nimport muiStyled from \"@emotion/styled\";\nimport ZigTypography from \"../../display/ZigTypography\";\n\nexport const Icon = styled(CheckmarkIcon)`\n  width: 10px;\n  height: 10px;\n  position: relative;\n  transition: transform 0.05s linear;\n  transform: scale(0);\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background: #101427;\n  border: 1px solid #706f82;\n  border-radius: 2.5px;\n  position: relative;\n  flex: 0 0 18px;\n  width: 18px;\n  height: 18px;\n  overflow: hidden;\n`;\n\nexport const Label = muiStyled(ZigTypography)`\n  font-weight: 400;\n  margin: 0 12px;\n`;\n\ntype LayoutProps = {\n  isActive: boolean;\n  disabled: boolean;\n};\n\nexport const Layout = styled.div<LayoutProps>`\n  display: flex;\n  cursor: pointer;\n  user-select: none;\n  align-items: flex-start;\n\n  ${({ isActive }) => `\n    ${styledIf(\n      isActive,\n      `\n      ${Box} {\n        border-color: #706f82;\n        color: #7682f7;\n      }\n      ${Icon} {\n        transform: scale(1) !important;\n        fill: #7682f7;\n      }\n    `,\n    )}\n    \n    &[disabled] {\n      cursor: default;\n      \n      ${Icon} {\n        filter: grayscale(100%);\n      }\n      \n      ${Label} {\n        color: #4f4f5e;\n      }\n  \n      ${Box} {\n        border-color: #2a2a36 !important;\n        \n        ${styledIf(\n          isActive,\n          `\n          box-shadow: 0 0 0 1px #2a2a36;\n        `,\n        )}\n      }\n    }\n  `}\n`;\n","import React from \"react\";\nimport { LoadingButton, LoadingButtonProps } from \"@mui/lab\";\nimport { ButtonGroup, styled, Tooltip } from \"@mui/material\";\nimport { dark } from \"../../../theme\";\n\nexport type ZigButtonProps = Omit<LoadingButtonProps, \"size\" | \"variant\"> & {\n  size?: LoadingButtonProps[\"size\"] | \"xlarge\";\n  variant?: LoadingButtonProps[\"variant\"];\n  ctaId?: string;\n  tooltip?: string;\n  narrow?: boolean;\n  linkTarget?: \"_blank\";\n  linkRel?: \"noopener noreferrer\";\n  active?: boolean;\n};\n\nconst ZigButton = ({\n  active,\n  tooltip,\n  ctaId,\n  color,\n  size,\n  narrow,\n  variant = \"contained\",\n  linkTarget,\n  linkRel,\n  ...props\n}: ZigButtonProps) => {\n  const button = (\n    <LoadingButton\n      data-tack-cta={ctaId}\n      // it wasn't me lol\n      size={size as LoadingButtonProps[\"size\"]}\n      variant={variant as LoadingButtonProps[\"variant\"]}\n      {...props}\n      {...(narrow\n        ? {\n            sx: {\n              ...props.sx,\n              minWidth: \"0 !important\",\n              padding: \"6px\",\n            },\n          }\n        : {})}\n      {...(props.href\n        ? {\n            rel: linkRel ?? \"noopener noreferrer\",\n            target: linkTarget ?? \"_blank\",\n          }\n        : {})}\n      // hack to preserve old behavior but allow for normal mui theming\n      color={variant === \"outlined\" && !color ? \"secondary\" : color}\n      className={active ? \"MuiButton-active\" : \"\"}\n    />\n  );\n  return tooltip ? (\n    <Tooltip title={tooltip}>\n      {/* if we want to have a tooltip and have the button be disabled, we need a new container */}\n      {props.disabled ? <span>{button}</span> : button}\n    </Tooltip>\n  ) : (\n    button\n  );\n};\n\nexport const ZigButtonGroup = styled(ButtonGroup)`\n  .MuiButton-root {\n    border-right-width: 0 !important;\n\n    &:last-child {\n      border-right-width: 1px !important;\n    }\n\n    &:hover,\n    &.MuiButton-active {\n      z-index: 3;\n      box-shadow: 1px 0 0 ${dark.neutral400};\n    }\n\n    &.Mui-disabled {\n      border-color: rgba(255, 255, 255, 0.1);\n    }\n  }\n` as typeof ButtonGroup;\n\nexport default ZigButton as typeof LoadingButton & typeof ZigButton;\n","import { Box, GlobalStyles, styled } from \"@mui/material\";\nimport { NiceScrollbar } from \"utils/css\";\nimport React from \"react\";\nimport { css } from \"@emotion/react\";\nimport { StyledComponent } from \"@emotion/styled\";\nimport { BoxTypeMap } from \"@mui/system\";\n\ntype Props = { error?: string; width?: number; small?: boolean; outlined?: boolean };\n\nexport const StyledSelectWrapper: StyledComponent<BoxTypeMap & Props> = styled(Box)<Props>`\n  .zig-react-select {\n    &__control {\n      border: 1px solid\n        ${({ theme, error }) => (error ? theme.palette.redGraphOrError : theme.palette.neutral600)};\n      padding: ${({ small }) => (small ? \"3px 16px 3px 9px\" : \"11px 24px 11px 16px\")};\n      margin-top: 4px;\n      min-height: ${({ small }) => (small ? \"0\" : \"60px\")};\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      cursor: pointer;\n      flex-wrap: nowrap;\n      ${({ outlined }) =>\n        css`\n          background: ${outlined ? \"transparent\" : \"rgba(16, 18, 37)\"};\n          background: ${outlined\n            ? \"transparent\"\n            : `linear-gradient(\n            90deg,\n            rgb(16 18 37) 0%,\n            rgb(16 18 37) 35%,\n            rgb(16 18 37) 100%\n          );`};\n        `}\n      transition: border-color 0.2s;\n      margin-bottom: 3px;\n\n      ${({ width }) => width && `width: ${width}${width?.toString().includes(\"%\") ? \"\" : \"px\"}`};\n\n      padding-right: 0;\n\n      &:hover {\n        border-color: ${({ theme, error }) =>\n          error ? theme.palette?.redGraphOrError : theme.palette.neutral400};\n        ${({ outlined }) =>\n          outlined &&\n          css`\n            background-color: rgba(118, 130, 247, 0.08);\n          `}\n        ${({ outlined, theme }) =>\n          outlined &&\n          css`\n            .zig-react-select__single-value {\n              color: ${theme.palette.neutral000} !important;\n            }\n          `}\n      }\n\n      &--is-focused {\n        border: 1px solid\n          ${({ theme, error }) =>\n            error ? theme.palette.redGraphOrError : theme.palette.neutral400};\n        box-shadow: none !important;\n      }\n    }\n\n    &__placeholder,\n    &__single-value {\n      padding: 0;\n      margin-left: 0;\n    }\n\n    &__value-container {\n      ${({ small }) =>\n        small &&\n        css`\n          padding: 0 5px;\n        `}\n    }\n\n    &__placeholder,\n    &__single-value,\n    &__input-container,\n    &__input {\n      font-size: ${({ small }) => (small ? \"13px\" : \"16px\")};\n      line-height: ${({ small }) => (small ? \"15px\" : \"20px\")};\n      ${({ small }) =>\n        small\n          ? css`\n              padding-bottom: 1px;\n            `\n          : \"\"};\n    }\n\n    &__single-value,\n    &__input {\n      ${({ small }) =>\n        small\n          ? css`\n              height: 13px;\n            `\n          : \"\"};\n      color: ${({ theme }) => theme.palette.neutral100} !important;\n    }\n\n    .zig-react-select__menu {\n      border: 1px solid ${({ theme }) => theme.palette.neutral600} !important;\n      color: ${({ theme }) => theme.palette.neutral200} !important;\n      background: rgba(16, 18, 37) !important;\n    }\n\n    &__placeholder {\n      color: ${({ theme }) => theme.palette.neutral400} !important;\n    }\n\n    &__input-container {\n      margin-left: 0;\n    }\n\n    &__indicator {\n      ${({ width }) =>\n        width &&\n        width <= 100 &&\n        css`\n          padding: 0 2px;\n        `};\n      ${({ small }) =>\n        small &&\n        css`\n          padding: 0 4px;\n          width: 22px;\n          height: 22px;\n        `};\n    }\n  }\n`;\n\nexport const ZigSelectGlobalStyle = (\n  <GlobalStyles\n    styles={css`\n      .zig-react-select {\n        &__menu {\n          &-list {\n            ${NiceScrollbar.toString()};\n          }\n        }\n      }\n    `}\n  />\n);\n","import styled from \"styled-components\";\nimport ZigTypography from \"./display/ZigTypography\";\nexport const MarginContainer = styled.div`\n  margin: 0 auto;\n  max-width: 1430px;\n  padding: 0 22px;\n  width: 100%;\n`;\n\nexport const PageContainer = styled(MarginContainer)`\n  padding: 52px 22px 0;\n`;\n\n// TODO: replace with proper styled comp usages instead of classes\nexport const ValueIndicator = styled(ZigTypography)<any>`\n  display: inline;\n  font-size: 15px !important;\n  line-height: 24px !important;\n  font-weight: 500;\n\n  ${(props: any) => `\n    \n    &.zero {\n      color: ${props.theme.neutral300}\n    }\n    \n    &.positive {\n      color: ${props.theme.greenGraph};\n    }\n    \n    &.negative {\n      color: ${props.theme.redGraphOrError};\n    }\n  `}\n`;\n"],"names":[],"sourceRoot":""}