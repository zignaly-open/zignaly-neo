{"version":3,"file":"components-inputs-ZigButton-stories.b49e7abd.iframe.bundle.js","mappings":";;;;;;;;;;;AA6CA;;;;;;;AASA;;;;;AC+DA","sources":["webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/index.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/stories.tsx"],"sourcesContent":["import React from \"react\";\nimport { LoadingButton, LoadingButtonProps } from \"@mui/lab\";\nimport { ButtonGroup, styled, Tooltip } from \"@mui/material\";\nimport { dark } from \"../../../theme\";\n\nexport type ZigButtonProps = Omit<LoadingButtonProps, \"size\"> & {\n  size?: LoadingButtonProps[\"size\"] | \"xlarge\";\n  ctaId?: string;\n  tooltip?: string;\n  active?: boolean;\n};\n\nconst ZigButton = ({ active, tooltip, ctaId, color, size, ...props }: ZigButtonProps) => {\n  const button = (\n    <LoadingButton\n      data-tack-cta={ctaId}\n      // it wasn't me lol\n      size={size as LoadingButtonProps[\"size\"]}\n      {...props}\n      // hack to preserve old behavior but allow for normal mui theming\n      color={props.variant === \"outlined\" && !color ? \"secondary\" : color}\n      className={active ? \"MuiButton-active\" : \"\"}\n    />\n  );\n  return tooltip ? (\n    <Tooltip title={tooltip}>\n      {/* if we want to have a tooltip and have the button be disabled, we need a new container */}\n      {props.disabled ? <span>{button}</span> : button}\n    </Tooltip>\n  ) : (\n    button\n  );\n};\n\nexport const ZigButtonGroup = styled(ButtonGroup)`\n  .MuiButton-root {\n    border-right-width: 0 !important;\n\n    &:last-child {\n      border-right-width: 1px !important;\n    }\n\n    &:hover,\n    &.MuiButton-active {\n      z-index: 3;\n      box-shadow: 1px 0 0 ${dark.neutral400};\n    }\n\n    &.Mui-disabled {\n      border-color: rgba(255, 255, 255, 0.1);\n    }\n  }\n` as typeof ButtonGroup;\n\nexport default ZigButton as typeof LoadingButton & typeof ZigButton;\n","import React, { useState } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport ZigButton, { ZigButtonProps } from \"./index\";\nimport { ButtonGroup, ButtonGroupProps } from \"@mui/material\";\nimport { styled } from \"@mui/system\";\nimport { Add } from \"@mui/icons-material\";\nimport ZigTypography from \"../../display/ZigTypography\";\n\nexport default {\n  title: \"Inputs/ZigButton\",\n  component: ZigButton,\n  argTypes: {\n    children: {\n      type: \"string\",\n    },\n    disabled: {\n      type: \"boolean\",\n      defaultValue: false,\n    },\n    variant: {\n      control: {\n        type: \"select\",\n      },\n      options: [\"outlined\", \"contained\"],\n    },\n    tooltip: {\n      type: \"string\",\n    },\n    size: {\n      control: {\n        type: \"select\",\n      },\n      options: [\"small\", \"medium\", \"large\"],\n    },\n  },\n} as Meta<ZigButtonProps>;\n\nconst Template: Story<ZigButtonProps> = (args) => <ZigButton {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  children: \"Amount to Withdraw\",\n  tooltip: \"Hello\",\n  variant: \"outlined\",\n};\n\nconst TemplateGroup: Story<ZigButtonProps> = ({ size, ...args }) => {\n  const [value, setValue] = useState<number>(1);\n  return (\n    <ButtonGroup variant=\"outlined\" size={size as ButtonGroupProps[\"size\"]}>\n      <ZigButton active={value === 1} onClick={() => setValue(1)} variant=\"outlined\" {...args} />\n      <ZigButton active={value === 2} onClick={() => setValue(2)} variant=\"outlined\" {...args} />\n      <ZigButton active={value === 3} onClick={() => setValue(3)} variant=\"outlined\" {...args} />\n    </ButtonGroup>\n  );\n};\n\nexport const Group = TemplateGroup.bind({});\nGroup.args = {\n  children: \"Amount to Withdraw\",\n};\n\nconst Wrapper = styled(\"div\")`\n  & > * {\n    display: inline-block;\n    margin-right: 15px !important;\n  }\n`;\n\nconst TemplateTextButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <>\n      <ZigTypography variant={\"h1\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h2\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h3\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h4\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Hello, let me tell you\n        a story of a button that lived in a very very long text. Yes, an{\" \"}\n        <ZigButton variant={\"text\"} {...args} /> lived in a very long text and then died unhappily\n        ever after. Yes, that was story of a button that lived in a very very long text.\n      </ZigTypography>\n\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Yes, a{\" \"}\n        <ZigButton startIcon={<Add />} endIcon={<Add />} variant={\"text\"}>\n          Button\n        </ZigButton>{\" \"}\n        can have icons, imagine that.\n      </ZigTypography>\n\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Yes, a{\" \"}\n        <ZigButton href=\"https://xfuturum.com\" variant={\"text\"}>\n          Button\n        </ZigButton>{\" \"}\n        can be a link, imagine that.\n      </ZigTypography>\n\n      <ZigTypography variant={\"body2\"} component={\"p\"}>\n        Hello <ZigButton variant={\"text\"} {...args} /> button in text in a very long\n      </ZigTypography>\n    </>\n  );\n};\n\nconst TemplateOutlinedButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton variant={\"outlined\"} size=\"small\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"medium\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"large\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"xlarge\" {...args} />\n    </Wrapper>\n  );\n};\n\nconst TemplateLoadingButtons: Story<typeof ZigButton> = (args) => {\n  return (\n    <>\n      <Wrapper>\n        <ZigButton variant={\"outlined\"} loading size=\"small\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"medium\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"large\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"xlarge\" {...args} />\n      </Wrapper>\n      <Wrapper>\n        <ZigButton variant={\"contained\"} loading size=\"small\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"medium\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"large\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"xlarge\" {...args} />\n      </Wrapper>\n      <Wrapper>\n        <ZigTypography variant={\"body1\"} component={\"p\"}>\n          Please welcome the{\" \"}\n          <ZigButton loading variant={\"text\"}>\n            Button\n          </ZigButton>\n          !\n        </ZigTypography>\n      </Wrapper>\n    </>\n  );\n};\n\nconst TemplateContainedButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton variant={\"contained\"} size=\"small\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"medium\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"large\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"xlarge\" {...args} />\n    </Wrapper>\n  );\n};\n\nconst TemplateIconButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"small\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"medium\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"large\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"xlarge\">\n        {args.children}\n      </ZigButton>\n    </Wrapper>\n  );\n};\n\nconst buttonExampleArgs = {\n  children: \"Amount to Withdraw\",\n};\n\nexport const TextButton = TemplateTextButton.bind({});\nexport const ContainedButton = TemplateContainedButton.bind({});\nexport const OutlinedButton = TemplateOutlinedButton.bind({});\nexport const Icon = TemplateIconButton.bind({});\nexport const Loading = TemplateLoadingButtons.bind({});\n\nTextButton.args = buttonExampleArgs;\nOutlinedButton.args = buttonExampleArgs;\nContainedButton.args = buttonExampleArgs;\nIcon.args = buttonExampleArgs;\nLoading.args = buttonExampleArgs;\n"],"names":[],"sourceRoot":""}