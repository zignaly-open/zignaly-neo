name: PS2 WL Deploy
on:
  workflow_call:
    inputs:
      deploy-env:
        required: true
        type: string

jobs:
  build:
    name: PS2 WL Server Deploy
    timeout-minutes: 20
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    env:
      HAS_CLOUDFLARE: ${{ secrets.CF_ZONE != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure deployment folder
        run: |
          sed -i -e 's/{directory}/${{ inputs.deploy-env }}/g' packages/ps2-wl-server/appspec.yml
          sed -i -e 's/{directory}/${{ inputs.deploy-env }}/g' packages/ps2-wl-server/scripts/ApplicationStart.sh
          sed -i -e 's/{directory}/${{ inputs.deploy-env }}/g' packages/ps2-wl-server/scripts/BeforeInstall.sh
          sed -i -e 's/{directory}/${{ inputs.deploy-env }}/g' packages/ps2-wl-server/scripts/AfterInstall.sh
      - name: Create PS2 .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          # env-specific
          envkey_REACT_APP_ENABLE_TRACKING: ${{ vars.ENABLE_TRACKING }}
          envkey_REACT_APP_GA_ID: ${{ vars.GA_ID }}
          envkey_REACT_APP_ENABLE_TEST_LANGUAGE: ${{ vars.ENABLE_TEST_LANGUAGE }}
          envkey_REACT_APP_BASE_API: ${{ vars.PS2_BASE_API }}
          envkey_REACT_APP_REFERRALS_API: ${{ vars.PS2_REFERRAL_API }}
          envkey_REACT_APP_NO_INDEX: ${{ vars.NO_INDEX }}

          #constant
          envkey_EXTEND_ESLINT: true
          envkey_DISABLE_ESLINT_PLUGIN: true
          envkey_ESLINT_NO_DEV_ERRORS: true

          # non-env-specific
          envkey_REACT_APP_SENTRY_DNS: ${{ vars.SENTRY_DNS }}
          envkey_REACT_APP_CUSTOMER_IO_SITE_ID: ${{ vars.CUSTOMER_IO_SITE_ID }}
          envkey_REACT_APP_LIVE_SESSION_TRACK_ID: ${{ vars.LIVE_SESSION_TRACK_ID }}
          envkey_REACT_APP_IPGEOLOCATION_API_KEY: ${{ vars.IPGEOLOCATION_API_KEY }}

          envkey_PUBLIC_URL: ${{ vars.CDN_URL }}

          directory: packages/ps2
          file_name: .env
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.15.1' # lol we actually use nodes 16, 18 and 20
          cache: 'yarn'
      - name: Install Lerna
        run: yarn global add lerna@6.6.2
      - name: Restore Lerna modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Bootstrap packages
        run: lerna bootstrap --scope=@zignaly-open/ps2
      - name: Build client + wl
        run: yarn ps2-wl-build
      - name: Create PS2 WL Server .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_BASE_API: ${{ vars.PS2_BASE_API }}
          envkey_WL_CACHE_TTL_OVERRIDE: ${{ vars.PS2_WL_CACHE_TTL_OVERRIDE }}
          envkey_WL_SLACK_LOG_THROTTLE: ${{ vars.PS2_WL_SLACK_LOG_THROTTLE }}
          envkey_PS2_ENV: ${{ inputs.deploy-env }}
          envkey_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          directory: packages/ps2-wl-server
          file_name: .env
      - name: TS check
        run: cd packages/ps2-wl-server && tsc --noemit
      - name: Add a workaround for type imports
        run: echo "//@ts-nocheck"$'\n'"$(cat ./packages/ps2-wl-server/src/config.ts)" > ./packages/ps2-wl-server/src/config.ts
      - name: AWS CodeDeploy
        uses: sourcetoad/aws-codedeploy-action@v1
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          aws_region: ${{ secrets.CODEPLOY_REGION }}
          codedeploy_name: zignaly
          codedeploy_group: ${{ secrets.CODEDEPLOY_GROUP }}
          codedeploy_register_only: false
          s3_bucket: ${{ secrets.CODEDEPLOY_BUCKET }}
          s3_folder: ${{ inputs.deploy-env }}
          max_polling_iterations: 60
          excluded_files: '.git/* *node_modules/*'
          directory: ./packages/ps2-wl-server
      - name: AWS Deploy
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: 'packages/ps2/build'
      - name: Invalidate Cloudflare
        if: ${{ env.HAS_CLOUDFLARE == 'true' }}
        uses: strrife/cloudflare-chunked-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CF_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CF_TOKEN }}
