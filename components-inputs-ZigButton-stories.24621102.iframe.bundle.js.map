{"version":3,"file":"components-inputs-ZigButton-stories.24621102.iframe.bundle.js","mappings":";AAqEA;;;;;;;;;;AAUA;;AAEA;AACA;;;;;;;;;;;;;AAaA;AACA;;;;;;;AASA;;;;;ACwCA","sources":["webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/index.tsx","webpack://@zignaly-open/ui/./src/components/inputs/ZigButton/stories.tsx"],"sourcesContent":["import React from \"react\";\nimport { LoadingButton, LoadingButtonProps } from \"@mui/lab\";\nimport { ButtonGroup, styled, Tooltip } from \"@mui/material\";\n\nexport type ZigButtonProps = Omit<LoadingButtonProps, \"size\" | \"variant\"> & {\n  size?: LoadingButtonProps[\"size\"] | \"xlarge\";\n  variant?: LoadingButtonProps[\"variant\"];\n  ctaId?: string;\n  tooltip?: string;\n  narrow?: boolean;\n  linkTarget?: \"_blank\";\n  linkRel?: \"noopener noreferrer\";\n  active?: boolean;\n};\n\nconst ZigButton = ({\n  active,\n  tooltip,\n  ctaId,\n  color,\n  size,\n  narrow,\n  variant = \"contained\",\n  linkTarget,\n  linkRel,\n  ...props\n}: ZigButtonProps) => {\n  const button = (\n    <LoadingButton\n      data-tack-cta={ctaId}\n      // it wasn't me lol\n      size={size as LoadingButtonProps[\"size\"]}\n      variant={variant as LoadingButtonProps[\"variant\"]}\n      {...props}\n      {...(narrow\n        ? {\n            sx: {\n              ...props.sx,\n              minWidth: \"0 !important\",\n              padding: \"6px\",\n            },\n          }\n        : {})}\n      {...(props.href\n        ? {\n            rel: linkRel ?? \"noopener noreferrer\",\n            target: linkTarget ?? \"_blank\",\n          }\n        : {})}\n      // @ts-ignore\n      data-testid={\n        props[\"data-testid\"] || (process.env.NODE_ENV === \"test\" && props.id) || undefined\n      }\n      // hack to preserve old behavior but allow for normal mui theming\n      color={variant === \"outlined\" && !color ? \"secondary\" : color}\n      className={active ? `${props.className} MuiButton-active` : props.className}\n    />\n  );\n  return tooltip ? (\n    <Tooltip title={tooltip}>\n      {/* if we want to have a tooltip and have the button be disabled, we need a new container */}\n      {props.disabled ? <span>{button}</span> : button}\n    </Tooltip>\n  ) : (\n    button\n  );\n};\n\nexport const ZigButtonGroup = styled(ButtonGroup)`\n  outline: 1px solid ${({ theme }) => theme.palette.neutral600};\n  outline-offset: -1px;\n\n  .MuiButton-root {\n    font-weight: 400;\n    text-transform: capitalize !important;\n\n    &:hover,\n    &.MuiButton-active {\n      z-index: 3;\n      border-color: ${({ theme }) => theme.palette.backgrounds.greyedOutBorder} !important;\n      border-radius: 5px;\n      background: ${({ theme }) => theme.palette.neutral750};\n      color: ${({ theme }) => theme.palette.highlighted};\n\n      + button,\n      + span button {\n        border-left-color: transparent;\n      }\n    }\n\n    &:not(:last-child) {\n      border-right-color: transparent;\n    }\n\n    &.Mui-disabled {\n      border-color: ${({ theme }) => theme.palette.neutral600};\n      color: ${({ theme }) => theme.palette.contrasting}33;\n    }\n  }\n\n  span button {\n    height: 100%;\n  }\n` as typeof ButtonGroup;\n\nexport default ZigButton as typeof LoadingButton & typeof ZigButton;\n","import React, { useState } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport ZigButton, { ZigButtonProps } from \"./index\";\nimport { ButtonGroup, ButtonGroupProps } from \"@mui/material\";\nimport { Box, styled } from \"@mui/system\";\nimport { Add } from \"@mui/icons-material\";\nimport ZigTypography from \"../../display/ZigTypography\";\n\nexport default {\n  title: \"Inputs/ZigButton\",\n  component: ZigButton,\n  argTypes: {\n    children: {\n      type: \"string\",\n    },\n    disabled: {\n      type: \"boolean\",\n      defaultValue: false,\n    },\n    variant: {\n      control: {\n        type: \"select\",\n      },\n      options: [\"outlined\", \"contained\"],\n    },\n    tooltip: {\n      type: \"string\",\n    },\n    size: {\n      control: {\n        type: \"select\",\n      },\n      options: [\"small\", \"medium\", \"large\"],\n    },\n  },\n} as Meta<ZigButtonProps>;\n\nconst Template: Story<ZigButtonProps> = (args) => <ZigButton {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  children: \"Amount to Withdraw\",\n  tooltip: \"Hello\",\n  variant: \"outlined\",\n};\n\nconst TemplateGroup: Story<ZigButtonProps> = ({ size, ...args }) => {\n  const [value, setValue] = useState<number>(1);\n  return (\n    <ButtonGroup variant=\"outlined\" size={size as ButtonGroupProps[\"size\"]}>\n      <ZigButton active={value === 1} onClick={() => setValue(1)} variant=\"outlined\" {...args} />\n      <ZigButton active={value === 2} onClick={() => setValue(2)} variant=\"outlined\" {...args} />\n      <ZigButton active={value === 3} onClick={() => setValue(3)} variant=\"outlined\" {...args} />\n    </ButtonGroup>\n  );\n};\n\nexport const Group = TemplateGroup.bind({});\nGroup.args = {\n  children: \"Amount to Withdraw\",\n};\n\nexport const Tooltip = Template.bind({});\nTooltip.args = {\n  children: \"Amount to Withdraw\",\n  variant: \"contained\",\n  tooltip: \"I will never give you up I will never let you down\",\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  children: \"Amount to Withdraw\",\n  variant: \"contained\",\n  tooltip: \"Molodoy chelovek, vy chto, ne vidite, u nas obed\",\n  disabled: true,\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  children: \"Amount to Withdraw\",\n  variant: \"contained\",\n  loading: true,\n};\n\nexport const Link = Template.bind({});\nLink.args = {\n  children: \"The technical partner you can rely on\",\n  variant: \"contained\",\n  href: \"https://xfuturum.com\",\n};\n\nconst Wrapper = styled(\"div\")`\n  & > * {\n    display: inline-block;\n    margin-right: 15px !important;\n  }\n`;\n\nconst TemplateTextButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <>\n      This button is always 13x bu design. If you needs a version that inherits the font size, pls\n      use ZigLink.\n      <ZigTypography variant={\"h1\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h2\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h3\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"h4\"}>\n        Hello <ZigButton variant={\"text\"} {...args} />\n      </ZigTypography>\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Hello, let me tell you\n        a story of a button that lived in a very very long text. Yes, an{\" \"}\n        <ZigButton variant={\"text\"} {...args} /> lived in a very long text and then died unhappily\n        ever after. Yes, that was story of a button that lived in a very very long text.\n      </ZigTypography>\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Yes, a{\" \"}\n        <ZigButton startIcon={<Add />} endIcon={<Add />} variant={\"text\"}>\n          Button\n        </ZigButton>{\" \"}\n        can have icons, imagine that.\n      </ZigTypography>\n      <ZigTypography variant={\"body1\"} component={\"p\"}>\n        Hello, let me tell you a story of a button that lived in a very very long text. Hello, let\n        me tell you a story of a button that lived in a very very long text. Yes, a{\" \"}\n        <ZigButton href=\"https://xfuturum.com\" variant={\"text\"}>\n          Button\n        </ZigButton>{\" \"}\n        can be a link, imagine that.\n      </ZigTypography>\n      <ZigTypography variant={\"body2\"} component={\"p\"}>\n        Hello <ZigButton variant={\"text\"} {...args} /> button in text in a very long\n      </ZigTypography>\n    </>\n  );\n};\n\nconst TemplateOutlinedButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton variant={\"outlined\"} size=\"small\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"medium\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"large\" {...args} />\n      <ZigButton variant={\"outlined\"} size=\"xlarge\" {...args} />\n    </Wrapper>\n  );\n};\n\nconst TemplateTwoStorey: Story<typeof ZigButton> = (args) => {\n  return (\n    <>\n      <Wrapper>\n        <ZigButton\n          variant={\"contained\"}\n          sx={{ padding: \"7px 26px\" }}\n          size=\"large\"\n          startIcon={<Add sx={{ height: 30, width: 30 }} />}\n        >\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\" }}>\n            Invest\n            <ZigTypography variant={\"caption\"} component=\"p\" color=\"neutral150\">\n              Invest fee 146%\n            </ZigTypography>\n          </Box>\n        </ZigButton>\n\n        <ZigButton variant={\"contained\"} size=\"large\" sx={{ padding: \"7px 26px\" }}>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\n            Invest\n            <ZigTypography variant={\"caption\"} component=\"p\" color=\"neutral150\">\n              Invest fee 146%\n            </ZigTypography>\n          </Box>\n        </ZigButton>\n\n        {/*Hack to show \"Show code\"*/}\n        {args.children}\n      </Wrapper>\n\n      <ZigTypography sx={{ mt: 2 }} variant={\"caption\"} component={\"p\"}>\n        You will have to adjust paddings yourself\n      </ZigTypography>\n    </>\n  );\n};\n\nconst TemplateLoadingButtons: Story<typeof ZigButton> = (args) => {\n  return (\n    <>\n      <Wrapper>\n        <ZigButton variant={\"outlined\"} loading size=\"small\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"medium\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"large\" {...args} />\n        <ZigButton variant={\"outlined\"} loading size=\"xlarge\" {...args} />\n      </Wrapper>\n      <Wrapper>\n        <ZigButton variant={\"contained\"} loading size=\"small\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"medium\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"large\" {...args} />\n        <ZigButton variant={\"contained\"} loading size=\"xlarge\" {...args} />\n      </Wrapper>\n      <Wrapper>\n        <ZigTypography variant={\"body1\"} component={\"p\"}>\n          Please welcome the{\" \"}\n          <ZigButton loading variant={\"text\"}>\n            Button\n          </ZigButton>\n          !\n        </ZigTypography>\n      </Wrapper>\n    </>\n  );\n};\n\nconst TemplateContainedButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton variant={\"contained\"} size=\"small\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"medium\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"large\" {...args} />\n      <ZigButton variant={\"contained\"} size=\"xlarge\" {...args} />\n    </Wrapper>\n  );\n};\n\nconst TemplateIconButton: Story<typeof ZigButton> = (args) => {\n  return (\n    <Wrapper>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"small\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"medium\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"large\">\n        {args.children}\n      </ZigButton>\n      <ZigButton startIcon={<Add />} variant={\"contained\"} size=\"xlarge\">\n        {args.children}\n      </ZigButton>\n    </Wrapper>\n  );\n};\n\nconst buttonExampleArgs = {\n  children: \"Amount to Withdraw\",\n};\n\nexport const TextButton = TemplateTextButton.bind({});\nexport const ContainedButton = TemplateContainedButton.bind({});\nexport const OutlinedButton = TemplateOutlinedButton.bind({});\nexport const Icon = TemplateIconButton.bind({});\nexport const LoadingAll = TemplateLoadingButtons.bind({});\nexport const TwoStorey = TemplateTwoStorey.bind({});\n\nTextButton.args = buttonExampleArgs;\nOutlinedButton.args = buttonExampleArgs;\nContainedButton.args = buttonExampleArgs;\nIcon.args = buttonExampleArgs;\nLoadingAll.args = buttonExampleArgs;\nTwoStorey.args = {};\n"],"names":[],"sourceRoot":""}