{"version":3,"file":"components-navigation-MenuDropDown-stories.4abcf03e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AC3HA;;ACIA;;;;;;;;;;;;;AAeA;;;;;;;AAOA;;;;AAcA;;;;;;;;;;;AAWA;AAwCA;;;;;;;;AAQA","sources":["webpack://@zignaly-open/ui/./src/components/display/Typography/styles.ts","webpack://@zignaly-open/ui/./src/components/display/Typography/types.tsx","webpack://@zignaly-open/ui/./src/components/navigation/MenuDropDown/styles.ts"],"sourcesContent":["import styled from \"styled-components\";\nimport { styledIf } from \"utils/styled\";\n\nconst getWeight = (weight: string) => {\n  if (weight === \"demibold\") {\n    return 600;\n  } else if (weight === \"medium\") {\n    return 500;\n  } else {\n    return 400;\n  }\n};\n\ninterface LayoutProps {\n  color: string;\n  underline: boolean;\n  weight: string;\n  marginRight?: number;\n  marginLeft?: number;\n  marginTop?: number;\n  marginBottom?: number;\n}\n\nexport const Layout = styled.h1<LayoutProps>`\n  font-family: \"Avenir next\", \"Red Hat Text\", sans-serif;\n  margin: 0;\n  padding: 0;\n  font-weight: 500;\n\n  &.h1 {\n    font-size: 22px;\n    line-height: 36px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h2 {\n    font-size: 18px;\n    line-height: 28px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h3 {\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h4 {\n    font-size: 13px;\n    line-height: 20px;\n    letter-spacing: 0.55px;\n  }\n\n  &.h5 {\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.55px;\n  }\n\n  &.bigNumber {\n    font-size: 26px;\n    line-height: 40px;\n    letter-spacing: 0.55px;\n  }\n\n  &.body1 {\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  &.body2 {\n    font-size: 13px;\n    line-height: 20px;\n    letter-spacing: 0.55px;\n  }\n\n  &.buttonxl {\n    font-size: 16px;\n    line-height: 20px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonl {\n    font-size: 13px;\n    line-height: 18px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonm {\n    font-size: 11px;\n    line-height: 14px;\n    letter-spacing: 1.1px;\n    font-weight: 600;\n  }\n\n  &.buttonsm {\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 600;\n    letter-spacing: 1.1px;\n  }\n\n  &.inputl {\n    font-size: 16px;\n    line-height: 20px;\n    font-weight: 400;\n    letter-spacing: 0.55px;\n  }\n\n  &.inputm {\n    font-size: 13px;\n    line-height: 18px;\n    font-weight: 400;\n    letter-spacing: 0.55px;\n  }\n\n  &.labelm {\n    font-weight: 400;\n    font-size: 15px;\n    line-height: 24px;\n    letter-spacing: 0.55px;\n  }\n\n  ${(props) => `\n    color: inherit;\n\n    ${styledIf(\n      props.color,\n      `\n      color: ${props.theme[props.color]};    \n    `,\n    )}\n    ${styledIf(\n      props.underline,\n      `\n      text-decoration-color: ${props.theme[props.color]};\n      text-decoration-line: underline;\n    `,\n    )}\n    ${styledIf(\n      props.weight,\n      `\n      font-weight: ${getWeight(props.weight)};\n    `,\n    )}\n  `}\n`;\n","import React from \"react\";\nimport { dark } from \"theme\";\n\nexport const componentByVariants = {\n  h1: \"span\",\n  h2: \"span\",\n  h3: \"span\",\n  h4: \"span\",\n  h5: \"span\",\n  bigNumber: \"span\",\n  body1: \"span\",\n  body2: \"span\",\n  buttonxl: \"span\",\n  buttonl: \"span\",\n  buttonm: \"span\",\n  buttonsm: \"span\",\n  inputl: \"span\",\n  inputm: \"span\",\n  labelm: \"span\",\n};\n\nexport const weightByType = {\n  medium: \"medium\",\n  demibold: \"demibold\",\n  regular: \"regular\",\n};\n\nexport interface TypographyProps {\n  variant?: keyof typeof componentByVariants;\n  weight?: keyof typeof weightByType;\n  className?: string;\n  component?: any;\n  color?: keyof typeof dark;\n  underline?: boolean;\n  children?: React.ReactNode; // optional to support <Trans />\n  marginRight?: number;\n  marginLeft?: number;\n  marginTop?: number;\n  marginBottom?: number;\n}\n","import styled from \"styled-components\";\nimport { styledIf } from \"../../../utils/styled\";\n\nexport const Layout = styled.div`\n  position: relative;\n`;\n\nexport const Field = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow: hidden;\n\n  span {\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n    display: block;\n  }\n`;\n\nexport const ArrowIcon = styled.div`\n  transition: all 0.15s linear;\n  transform-origin: center;\n  width: 28px;\n  height: 28px;\n\n  svg {\n    ${(props: any) => `\n      fill: ${props.theme.neutral300};\n    `}\n    width: 100%;\n    height: 100%;\n  }\n`;\n\ntype ButtonProps = {\n  center?: boolean;\n  isActiveDropDown: boolean;\n  focused: boolean;\n};\n\nexport const Button = styled.div<ButtonProps>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 22px;\n  padding: 14px 28px;\n  justify-content: space-between;\n  user-select: none;\n  height: 56px;\n  cursor: pointer;\n\n  ${({ center, theme, isActiveDropDown, focused }) => `\n    background: #12152C;\n    border: 1px solid #222249;\n    \n    ${styledIf(\n      focused,\n      `\n      border-bottom: 1px solid ${theme.secondary};\n      \n      span {\n        color: ${theme.secondary};\n      }\n    `,\n      `\n      span {\n        color: ${theme.neutral300};\n      }\n    `,\n    )}\n    \n    ${styledIf(\n      isActiveDropDown,\n      `\n      ${ArrowIcon} {\n        transform: rotate(-180deg);\n      }\n    `,\n    )}\n    \n    ${styledIf(\n      center,\n      `\n      ${Field} {\n        text-align: center;\n      }\n    `,\n    )}\n  `}\n`;\n\nexport const DropDown = styled.div<any>`\n  top: 100%;\n  left: 0;\n  right: 0;\n  position: absolute;\n  width: 100%;\n  overflow: auto;\n\n  ${(props: any) => `\n    background: #12152C;\n    max-height: ${props.maxHeight ?? \"200px\"};\n  `}\n\n  box-shadow: 0px 5px 11px rgba(11, 13, 26, 0.25);\n  border-radius: 0 0 5px 5px;\n`;\n"],"names":[],"sourceRoot":""}